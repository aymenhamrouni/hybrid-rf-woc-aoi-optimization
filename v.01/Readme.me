# Hybrid RF-WOC Network Optimization with Age of Information (AoI) Metrics

> **Note**: This is version 0.1 of the code. A newer, more comprehensive version is available at (https://github.com/aymenhamrouni/hybrid-rf-woc-aoi-optimization).

## Overview

This project implements a Mixed Integer Non-Linear Programming (MINLP) optimization framework for hybrid Radio Frequency (RF) and Wireless Optical Communication (WOC) systems in IoT networks. The framework focuses on optimizing network scheduling to minimize Age of Information (AoI) while considering energy consumption constraints.

## Key Features

### Core Functionality
- Hybrid RF/WOC communication optimization
- Age of Information (AoI) minimization
- Energy consumption constraints
- Device selection optimization
- Monte Carlo simulation support
- Parallel processing capabilities
- Visualization tools for results analysis

### Optimization Objectives
- Maximize message delivery
- Minimize energy consumption
- Optimize network capacity
- Minimize transmission delay
- Balance technology switching overhead

## Project Structure

```
.
├── main.py                 # Main simulation driver
│   - Handles simulation setup and execution
│   - Manages Monte Carlo simulations
│   - Controls network size variations
│
├── milpModel.py           # MINLP optimization model
│   - Implements core optimization model
│   - Handles multiple objective functions
│   - Manages constraints and variables
│
├── paretoMILP.py          # Pareto optimization
│   - Implements multi-objective optimization
│   - Analyzes trade-offs between objectives
│
├── Pareto.py              # Pareto front analysis
│   - Generates Pareto front plots
│   - Analyzes optimization trade-offs
│
├── data_generation.py     # Network data generation
│   - Generates network topology
│   - Creates message queues
│   - Calculates channel parameters
│
└── requirement.txt        # Python dependencies
```

## Dependencies

- Python 3.8+
- docplex >= 2.25.236 (IBM CPLEX solver)
- numpy >= 1.21.0
- pandas >= 1.3.0
- matplotlib >= 3.4.0
- scipy >= 1.7.0
- joblib >= 1.0.0
- mpld3 >= 0.5.5
- tqdm >= 4.62.0

## Installation

1. Clone the repository:
```bash
git clone https://github.com/aymenhamrouni/hybrid-rf-woc-aoi-optimization.git
cd hybrid-rf-woc-aoi-optimization
```

2. Install dependencies:
```bash
pip install -r requirement.txt
```

## Usage

### Basic Simulation

```bash
python main.py
```

This will:
- Generate simulation data
- Run the optimization framework
- Produce plots for:
  - Age of Information (AoI) analysis
  - Energy consumption patterns
  - Device selection patterns
  - Performance metrics

### Pareto Analysis

To analyze trade-offs between RF and WOC communication:
```bash
python Pareto.py
```

This generates:
- Pareto front analysis
- Trade-off curves
- Optimization boundaries

## Output and Visualization

The simulation generates several visualizations:
1. Network parameter distributions (SNR and capacity)
2. Energy efficiency metrics
3. AoI evolution plots
4. Scheduling matrices
5. Performance comparison plots

## Citation

If you use this code in your research, please cite:
> Hamrouni, A., Pollin, S., & Sallouha, H. (2024). AoI in Context-Aware Hybrid Radio-Optical IoT Networks. In _2024 IEEE Global Communications Conference (GLOBECOM)_ (pp. 1966-1972). IEEE. DOI: [10.1109/GLOBECOM52923.2024.10901639](https://doi.org/10.1109/GLOBECOM52923.2024.10901639)

## Contact

For questions or inquiries, please contact:
- Aymen Hamrouni: [aymen.hamrouni@kuleuven.be]
- Sofie Pollin: [sofie.pollin@kuleuven.be]
- Hazem Sallouha: [hazem.sallouha@kuleuven.be]

# How To Use:

  

- Install the required packages using requirement.txt :

```

pip install -r requirements.txt

```

- Run main.py to generate devices' selections and simulation figures (i.e., AoI, Energy Consumption, etc) :

 ```

python main.py

```
- Run Pareto.py to generate the pareto weights curve for OC and RF



 ```

python Pareto.py

```

  
  
